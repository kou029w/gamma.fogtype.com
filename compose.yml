services:
  caddy:
    image: caddy:2.6.2-alpine@sha256:25a0097607868fb05a89a5ab9fea2f2ea4cecdc89d887d7dcee8c778a21b9e1f
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443/udp"
      - "443:443/tcp"
      - "127.0.0.1:2019:2019"
    command: caddy reverse-proxy --from ${SERVER_HOST:?} --to http://drone
    volumes:
      - caddy_data:/data
      - caddy_config:/config
  drone:
    image: drone/drone:2.16.0@sha256:cc327f09ea02d676dee02091b88fbcff7e0d24f0b8841b220b3ba6f9df2e66a4
    restart: unless-stopped
    environment:
      DRONE_CRON_INTERVAL: 1m
      DRONE_GITEA_SERVER: ${DRONE_GITEA_SERVER:?}
      DRONE_GITEA_CLIENT_ID: ${DRONE_GITEA_CLIENT_ID:?}
      DRONE_GITEA_CLIENT_SECRET: ${DRONE_GITEA_CLIENT_SECRET:?}
      DRONE_RPC_SECRET: ${DRONE_RPC_SECRET:?}
      DRONE_SERVER_HOST: ${DRONE_SERVER_HOST:?}
      DRONE_SERVER_PROTO: ${DRONE_SERVER_PROTO:?}
      DRONE_USER_CREATE: ${DRONE_USER_CREATE:?}
    volumes:
      - drone_data_v2:/data

  runner:
    image: drone/drone-runner-docker:1.8.2@sha256:9479ddc50e50c205f4508e2062f7dbc757822c7b05ab93de0b8378d97214279b
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      DRONE_RUNNER_NAME: default
      DRONE_RPC_PROTO: http
      DRONE_RPC_HOST: drone
      DRONE_RPC_SECRET: ${DRONE_RPC_SECRET:?}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
volumes:
  caddy_data:
  caddy_config:
  drone_data_v2:
